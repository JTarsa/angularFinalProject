{"ast":null,"code":"import { WorkStatus } from 'src/app/enums/workStatus.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/functionality.service\";\nimport * as i3 from \"src/app/services/task.service\";\nimport * as i4 from \"@angular/common\";\nfunction TaskListComponent_ng_container_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"ul\")(2, \"li\")(3, \"h1\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"li\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"li\", 7);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"li\", 7);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 8)(12, \"div\", 9)(13, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_ng_container_3_div_1_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const item_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.showTaskDetails(item_r1.ID));\n    });\n    i0.ɵɵtext(14, \"\\u2139\\uFE0E\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_ng_container_3_div_1_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const item_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deleteTask(item_r1.ID));\n    });\n    i0.ɵɵtext(16, \"\\u274C\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Nazwa: \", item_r1.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Opis: \", item_r1.description, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Priorytet: \", item_r1.priority, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Status: \", item_r1.state, \"\");\n  }\n}\nfunction TaskListComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskListComponent_ng_container_3_div_1_Template, 17, 4, \"div\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r1.functionalityID === ctx_r0.functionalityID);\n  }\n}\nexport class TaskListComponent {\n  constructor(route, functionalityService, router, taskService) {\n    this.route = route;\n    this.functionalityService = functionalityService;\n    this.router = router;\n    this.taskService = taskService;\n    this.functionalities = [];\n    this.tasks = [];\n    this.taskService.getTasks().subscribe(taskList => {\n      this.tasks = taskList;\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id !== null) {\n        this.functionalityID = id;\n        this.getSingleFunctionality(this.functionalityID);\n      } else {\n        this.functionalityID = '';\n      }\n    });\n  }\n  getSingleFunctionality(ID) {\n    this.functionalityService.getSingleFunctionality(ID).subscribe(functionality => {\n      this.functionality = functionality;\n      this.functionalities.push(this.functionality);\n    });\n  }\n  deleteTask(ID) {\n    this.taskService.deleteTask(ID).subscribe(() => {\n      console.log('Task został usunięty');\n      this.tasks = this.tasks.filter(item => item.ID !== ID);\n    }, error => console.log(error));\n  }\n  showTaskDetails(ID) {\n    // Implementacja wyświetlania szczegółów zadania\n  }\n  addTask() {\n    this.router.navigate(['/task/create']);\n  }\n  updateFunctionalityStatus(functionality) {\n    if (functionality.tasks && functionality.tasks.length > 0) {\n      const hasDoingTask = functionality.tasks.some(task => task.state === WorkStatus.Doing);\n      const allTasksDone = functionality.tasks.every(task => task.state === WorkStatus.Done);\n      if (hasDoingTask) {\n        functionality.status = WorkStatus.Doing;\n      } else if (allTasksDone) {\n        functionality.status = WorkStatus.Done;\n      } else {\n        functionality.status = WorkStatus.Todo;\n      }\n    } else {\n      if (functionality.status === WorkStatus.Doing) {\n        functionality.status = WorkStatus.Done;\n      }\n    }\n  }\n}\nTaskListComponent.ɵfac = function TaskListComponent_Factory(t) {\n  return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FunctionalityService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i3.TaskService));\n};\nTaskListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskListComponent,\n  selectors: [[\"app-task-list\"]],\n  decls: 6,\n  vars: 1,\n  consts: [[1, \"max-w-[1200px]\", \"mt-4\", \"mx-6\", \"xl:mx-auto\"], [1, \"text-3xl\", \"text-center\", \"font-semibold\"], [4, \"ngFor\", \"ngForOf\"], [1, \"block\", \"px-4\", \"text-xl\", \"font-bold\", \"text-white\", \"rounded-lg\", \"bg-blue-500\", \"mt-6\", \"mx-auto\", \"py-3\", 3, \"click\"], [\"class\", \"px-6 py-4 bg-white my-2 rounded-xl relative border shadow-sm\", 4, \"ngIf\"], [1, \"px-6\", \"py-4\", \"bg-white\", \"my-2\", \"rounded-xl\", \"relative\", \"border\", \"shadow-sm\"], [1, \"text-xl\"], [1, \"text-gray-400\", \"text-sm\", \"my-2\"], [1, \"absolute\", \"right-4\", \"top-4\", \"rounded-full\", \"p-1\"], [1, \"flex\", \"gap-2\", \"text-xl\"], [3, \"click\"]],\n  template: function TaskListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \" List of tasks for this functionality \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TaskListComponent_ng_container_3_Template, 2, 1, \"ng-container\", 2);\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_4_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵtext(5, \" Create task \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrLWxpc3QuY29tcG9uZW50LnNjc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWxpc3QvdGFzay1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx3S0FBd0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["WorkStatus","i0","TaskListComponent","constructor","route","functionalityService","router","taskService","getTasks","subscribe","taskList","tasks","ngOnInit","paramMap","params","id","get","functionalityID","getSingleFunctionality","ID","functionality","functionalities","push","deleteTask","console","log","filter","item","error","showTaskDetails","addTask","navigate","updateFunctionalityStatus","length","hasDoingTask","some","task","state","Doing","allTasksDone","every","Done","status","Todo","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-list/task-list.component.ts","/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-list/task-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FunctionalityInterface } from 'src/app/interfaces/functionality.interface';\nimport { FunctionalityService } from 'src/app/services/functionality.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TaskService } from 'src/app/services/task.service';\nimport { TaskInterface } from 'src/app/interfaces/task.interface';\nimport { WorkStatus } from 'src/app/enums/workStatus.enum';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss'],\n})\nexport class TaskListComponent implements OnInit {\n  functionality!: FunctionalityInterface;\n  functionalities: FunctionalityInterface[] = [];\n  tasks: TaskInterface[] = [];\n  functionalityID!: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private functionalityService: FunctionalityService,\n    private router: Router,\n    private taskService: TaskService\n  ) {\n    this.taskService.getTasks().subscribe((taskList: TaskInterface[]) => {\n      this.tasks = taskList;\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      const id = params.get('id');\n      if (id !== null) {\n        this.functionalityID = id;\n        this.getSingleFunctionality(this.functionalityID);\n      } else {\n        this.functionalityID = '';\n      }\n    });\n  }\n\n  getSingleFunctionality(ID: string) {\n    this.functionalityService\n      .getSingleFunctionality(ID)\n      .subscribe((functionality) => {\n        this.functionality = functionality as FunctionalityInterface;\n        this.functionalities.push(this.functionality);\n      });\n  }\n\n  deleteTask(ID: string) {\n    this.taskService.deleteTask(ID).subscribe(\n      () => {\n        console.log('Task został usunięty');\n        this.tasks = this.tasks.filter((item) => item.ID !== ID);\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  showTaskDetails(ID: string) {\n    // Implementacja wyświetlania szczegółów zadania\n  }\n\n  addTask() {\n    this.router.navigate(['/task/create']);\n  }\n\n  updateFunctionalityStatus(functionality: FunctionalityInterface) {\n    if (functionality.tasks && functionality.tasks.length > 0) {\n      const hasDoingTask = functionality.tasks.some(\n        (task) => task.state === WorkStatus.Doing\n      );\n      const allTasksDone = functionality.tasks.every(\n        (task) => task.state === WorkStatus.Done\n      );\n\n      if (hasDoingTask) {\n        functionality.status = WorkStatus.Doing;\n      } else if (allTasksDone) {\n        functionality.status = WorkStatus.Done;\n      } else {\n        functionality.status = WorkStatus.Todo;\n      }\n    } else {\n      if (functionality.status === WorkStatus.Doing) {\n        functionality.status = WorkStatus.Done;\n      }\n    }\n  }\n}\n","<div class=\"max-w-[1200px] mt-4 mx-6 xl:mx-auto\">\n  <h1 class=\"text-3xl text-center font-semibold\">\n    List of tasks for this functionality\n  </h1>\n  <ng-container *ngFor=\"let item of tasks\">\n    <div\n      class=\"px-6 py-4 bg-white my-2 rounded-xl relative border shadow-sm\"\n      *ngIf=\"item.functionalityID === functionalityID\"\n    >\n      <ul>\n        <li>\n          <h1 class=\"text-xl\">Nazwa: {{ item.name }}</h1>\n        </li>\n        <li class=\"text-gray-400 text-sm my-2\">Opis: {{ item.description }}</li>\n        <li class=\"text-gray-400 text-sm my-2\">\n          Priorytet: {{ item.priority }}\n        </li>\n        <li class=\"text-gray-400 text-sm my-2\">Status: {{ item.state }}</li>\n      </ul>\n\n      <div class=\"absolute right-4 top-4 rounded-full p-1\">\n        <div class=\"flex gap-2 text-xl\">\n          <button (click)=\"showTaskDetails(item.ID)\">ℹ︎</button>\n          <button (click)=\"deleteTask(item.ID)\">❌</button>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <button\n    (click)=\"addTask()\"\n    class=\"block px-4 text-xl font-bold text-white rounded-lg bg-blue-500 mt-6 mx-auto py-3\"\n  >\n    Create task\n  </button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}