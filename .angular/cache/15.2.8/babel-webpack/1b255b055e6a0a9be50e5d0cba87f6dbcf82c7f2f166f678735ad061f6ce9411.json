{"ast":null,"code":"import { WorkStatus } from 'src/app/enums/workStatus.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/functionality.service\";\nimport * as i3 from \"src/app/services/task.service\";\nexport class TaskListComponent {\n  constructor(route, functionalityService, router, taskService) {\n    this.route = route;\n    this.functionalityService = functionalityService;\n    this.router = router;\n    this.taskService = taskService;\n    this.functionalities = [];\n    this.tasks = [];\n    this.taskService.getTasks().subscribe(taskList => {\n      this.tasks = taskList;\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id !== null) {\n        this.functionalityID = id;\n        this.getSingleFunctionality(this.functionalityID);\n      } else {\n        this.functionalityID = '';\n      }\n    });\n  }\n  getSingleFunctionality(ID) {\n    this.functionalityService.getSingleFunctionality(ID).subscribe(functionality => {\n      this.functionality = functionality;\n      this.functionalities.push(this.functionality);\n    });\n  }\n  deleteTask(ID) {\n    this.taskService.deleteTask(ID).subscribe(() => {\n      console.log('Task został usunięty');\n      this.tasks = this.tasks.filter(item => item.ID !== ID);\n    }, error => console.log(error));\n  }\n  showTaskDetails(ID) {\n    // Implementacja wyświetlania szczegółów zadania\n  }\n  addTask() {\n    this.router.navigate(['/task/create']);\n  }\n  updateFunctionalityStatus(functionality) {\n    if (functionality.tasks && functionality.tasks.length > 0) {\n      const hasDoingTask = functionality.tasks.some(task => task.state === WorkStatus.Doing);\n      const allTasksDone = functionality.tasks.every(task => task.state === WorkStatus.Done);\n      if (hasDoingTask) {\n        functionality.status = WorkStatus.Doing;\n      } else if (allTasksDone) {\n        functionality.status = WorkStatus.Done;\n      } else {\n        functionality.status = WorkStatus.Todo;\n      }\n    } else {\n      if (functionality.status === WorkStatus.Doing) {\n        functionality.status = WorkStatus.Done;\n      }\n    }\n  }\n}\nTaskListComponent.ɵfac = function TaskListComponent_Factory(t) {\n  return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FunctionalityService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i3.TaskService));\n};\nTaskListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskListComponent,\n  selectors: [[\"app-task-list\"]],\n  decls: 23,\n  vars: 4,\n  consts: [[1, \"task-list\"], [1, \"title\"], [1, \"task-item\"], [1, \"task-name\"], [1, \"task-description\"], [1, \"task-priority\"], [1, \"task-state\"], [1, \"task-buttons\"], [1, \"info-button\", 3, \"click\"], [1, \"delete-button\", 3, \"click\"], [1, \"create-button\", 3, \"click\"]],\n  template: function TaskListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \" List of tasks for this functionality \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainerStart(3);\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"ul\")(6, \"li\")(7, \"h1\", 3);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"li\", 4);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"li\", 5);\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"li\", 6);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 7)(16, \"div\")(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_17_listener() {\n        return ctx.showTaskDetails(ctx.item.ID);\n      });\n      i0.ɵɵtext(18, \"\\u2139\\uFE0E\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_19_listener() {\n        return ctx.deleteTask(ctx.item.ID);\n      });\n      i0.ɵɵtext(20, \"\\u274C\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementStart(21, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_21_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵtext(22, \" Create task \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\"Nazwa: \", ctx.item.name, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Opis: \", ctx.item.description, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Priorytet: \", ctx.item.priority, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Status: \", ctx.item.state, \"\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWxpc3QvdGFzay1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9LQUFvSyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["WorkStatus","TaskListComponent","constructor","route","functionalityService","router","taskService","getTasks","subscribe","taskList","tasks","ngOnInit","paramMap","params","id","get","functionalityID","getSingleFunctionality","ID","functionality","functionalities","push","deleteTask","console","log","filter","item","error","showTaskDetails","addTask","navigate","updateFunctionalityStatus","length","hasDoingTask","some","task","state","Doing","allTasksDone","every","Done","status","Todo","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-list/task-list.component.ts","/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-list/task-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FunctionalityInterface } from 'src/app/interfaces/functionality.interface';\nimport { FunctionalityService } from 'src/app/services/functionality.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TaskService } from 'src/app/services/task.service';\nimport { TaskInterface } from 'src/app/interfaces/task.interface';\nimport { WorkStatus } from 'src/app/enums/workStatus.enum';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css'],\n})\nexport class TaskListComponent implements OnInit {\n  functionality!: FunctionalityInterface;\n  functionalities: FunctionalityInterface[] = [];\n  tasks: TaskInterface[] = [];\n  functionalityID!: string;\n  item: any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private functionalityService: FunctionalityService,\n    private router: Router,\n    private taskService: TaskService\n  ) {\n    this.taskService.getTasks().subscribe((taskList: TaskInterface[]) => {\n      this.tasks = taskList;\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      const id = params.get('id');\n      if (id !== null) {\n        this.functionalityID = id;\n        this.getSingleFunctionality(this.functionalityID);\n      } else {\n        this.functionalityID = '';\n      }\n    });\n  }\n\n  getSingleFunctionality(ID: string) {\n    this.functionalityService\n      .getSingleFunctionality(ID)\n      .subscribe((functionality) => {\n        this.functionality = functionality as FunctionalityInterface;\n        this.functionalities.push(this.functionality);\n      });\n  }\n\n  deleteTask(ID: string) {\n    this.taskService.deleteTask(ID).subscribe(\n      () => {\n        console.log('Task został usunięty');\n        this.tasks = this.tasks.filter((item) => item.ID !== ID);\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  showTaskDetails(ID: string) {\n    // Implementacja wyświetlania szczegółów zadania\n  }\n\n  addTask() {\n    this.router.navigate(['/task/create']);\n  }\n\n  updateFunctionalityStatus(functionality: FunctionalityInterface) {\n    if (functionality.tasks && functionality.tasks.length > 0) {\n      const hasDoingTask = functionality.tasks.some(\n        (task) => task.state === WorkStatus.Doing\n      );\n      const allTasksDone = functionality.tasks.every(\n        (task) => task.state === WorkStatus.Done\n      );\n\n      if (hasDoingTask) {\n        functionality.status = WorkStatus.Doing;\n      } else if (allTasksDone) {\n        functionality.status = WorkStatus.Done;\n      } else {\n        functionality.status = WorkStatus.Todo;\n      }\n    } else {\n      if (functionality.status === WorkStatus.Doing) {\n        functionality.status = WorkStatus.Done;\n      }\n    }\n  }\n}\n","<div class=\"task-list\">\n  <h1 class=\"title\">\n    List of tasks for this functionality\n  </h1>\n  <ng-container>\n    <div class=\"task-item\">\n      <ul>\n        <li>\n          <h1 class=\"task-name\">Nazwa: {{ item.name }}</h1>\n        </li>\n        <li class=\"task-description\">Opis: {{ item.description }}</li>\n        <li class=\"task-priority\">Priorytet: {{ item.priority }}</li>\n        <li class=\"task-state\">Status: {{ item.state }}</li>\n      </ul>\n\n      <div class=\"task-buttons\">\n        <div>\n          <button class=\"info-button\" (click)=\"showTaskDetails(item.ID)\">ℹ︎</button>\n          <button class=\"delete-button\" (click)=\"deleteTask(item.ID)\">❌</button>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <button class=\"create-button\" (click)=\"addTask()\">\n    Create task\n  </button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}