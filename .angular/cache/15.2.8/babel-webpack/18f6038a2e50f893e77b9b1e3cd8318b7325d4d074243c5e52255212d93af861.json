{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ProjectService {\n  getDataFromLocalStorage() {\n    const data = localStorage.getItem(this.localStorageKey);\n    if (data) this.projects = JSON.parse(data);\n  }\n  saveDataToLocalStorage() {\n    localStorage.setItem(this.localStorageKey, JSON.stringify(this.projects));\n  }\n  constructor() {\n    this.localStorageKey = 'projects';\n    this.projects = [{\n      ID: '1',\n      name: 'Projekt testowy',\n      description: 'Oto testowy projekt'\n    }];\n    this.getDataFromLocalStorage();\n  }\n  getProjects() {\n    return of(this.projects);\n  }\n  getSingleProject(ID) {\n    const project = this.projects.find(p => p.ID === ID);\n    if (project) {\n      return of(project);\n    } else {\n      throw new Error('Task not found');\n    }\n  }\n  createProject(project) {\n    this.projects.push(project);\n    this.saveDataToLocalStorage();\n    return of(project);\n  }\n  updateProject(project) {\n    const projectToUpdate = this.projects.find(p => p.ID === project.name);\n    if (projectToUpdate) {\n      projectToUpdate.name = project.name;\n      projectToUpdate.description = project.description;\n      this.saveDataToLocalStorage();\n      return of(projectToUpdate);\n    } else {\n      return of();\n    }\n  }\n  deleteProject(ID) {\n    const newProjectsList = this.projects.filter(p => p.ID !== ID);\n    if (newProjectsList) {\n      this.projects = newProjectsList;\n      this.saveDataToLocalStorage();\n      return of(true);\n    } else {\n      return of(false);\n    }\n  }\n}\nProjectService.ɵfac = function ProjectService_Factory(t) {\n  return new (t || ProjectService)();\n};\nProjectService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectService,\n  factory: ProjectService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,cAAc;EAUjBC,uBAAuB;IAC7B,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,eAAe,CAAC;IACvD,IAAIH,IAAI,EAAE,IAAI,CAACI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC;EAC5C;EAEQO,sBAAsB;IAC5BN,YAAY,CAACO,OAAO,CAAC,IAAI,CAACL,eAAe,EAAEE,IAAI,CAACI,SAAS,CAAC,IAAI,CAACL,QAAQ,CAAC,CAAC;EAC3E;EAEAM;IAlBQ,oBAAe,GAAG,UAAU;IAC5B,aAAQ,GAAuB,CACrC;MACEC,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,iBAAiB;MACvBC,WAAW,EAAE;KACd,CACF;IAYC,IAAI,CAACd,uBAAuB,EAAE;EAChC;EAEAe,WAAW;IACT,OAAOjB,EAAE,CAAC,IAAI,CAACO,QAAQ,CAAC;EAC1B;EAEAW,gBAAgB,CAACJ,EAAU;IACzB,MAAMK,OAAO,GAAG,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACP,EAAE,KAAKA,EAAE,CAAC;IAEtD,IAAIK,OAAO,EAAE;MACX,OAAOnB,EAAE,CAACmB,OAAO,CAAC;KACnB,MAAM;MACL,MAAM,IAAIG,KAAK,CAAC,gBAAgB,CAAC;;EAErC;EAEAC,aAAa,CAACJ,OAAyB;IACrC,IAAI,CAACZ,QAAQ,CAACiB,IAAI,CAACL,OAAO,CAAC;IAC3B,IAAI,CAACT,sBAAsB,EAAE;IAC7B,OAAOV,EAAE,CAACmB,OAAO,CAAC;EACpB;EAEAM,aAAa,CAACN,OAAyB;IACrC,MAAMO,eAAe,GAAG,IAAI,CAACnB,QAAQ,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACP,EAAE,KAAKK,OAAO,CAACJ,IAAI,CAAC;IAExE,IAAIW,eAAe,EAAE;MACnBA,eAAe,CAACX,IAAI,GAAGI,OAAO,CAACJ,IAAI;MACnCW,eAAe,CAACV,WAAW,GAAGG,OAAO,CAACH,WAAW;MACjD,IAAI,CAACN,sBAAsB,EAAE;MAC7B,OAAOV,EAAE,CAAC0B,eAAe,CAAC;KAC3B,MAAM;MACL,OAAO1B,EAAE,EAAE;;EAEf;EAEA2B,aAAa,CAACb,EAAU;IACtB,MAAMc,eAAe,GAAG,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAAER,CAAC,IAAKA,CAAC,CAACP,EAAE,KAAKA,EAAE,CAAC;IAEhE,IAAIc,eAAe,EAAE;MACnB,IAAI,CAACrB,QAAQ,GAAGqB,eAAe;MAC/B,IAAI,CAAClB,sBAAsB,EAAE;MAC7B,OAAOV,EAAE,CAAC,IAAI,CAAC;KAChB,MAAM;MACL,OAAOA,EAAE,CAAC,KAAK,CAAC;;EAEpB;;AAlEWC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA6B,SAAd7B,cAAc;EAAA8B,YAFb;AAAM","names":["of","ProjectService","getDataFromLocalStorage","data","localStorage","getItem","localStorageKey","projects","JSON","parse","saveDataToLocalStorage","setItem","stringify","constructor","ID","name","description","getProjects","getSingleProject","project","find","p","Error","createProject","push","updateProject","projectToUpdate","deleteProject","newProjectsList","filter","factory","providedIn"],"sourceRoot":"","sources":["/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/services/project.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { ProjectInterface } from '../interfaces/project.interface';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectService {\n  private localStorageKey = 'projects';\n  private projects: ProjectInterface[] = [\n    {\n      ID: '1',\n      name: 'Projekt testowy',\n      description: 'Oto testowy projekt',\n    },\n  ];\n\n  private getDataFromLocalStorage(): void {\n    const data = localStorage.getItem(this.localStorageKey);\n    if (data) this.projects = JSON.parse(data);\n  }\n\n  private saveDataToLocalStorage(): void {\n    localStorage.setItem(this.localStorageKey, JSON.stringify(this.projects));\n  }\n\n  constructor() {\n    this.getDataFromLocalStorage();\n  }\n\n  getProjects(): Observable<ProjectInterface[]> {\n    return of(this.projects);\n  }\n\n  getSingleProject(ID: string): Observable<ProjectInterface> {\n    const project = this.projects.find((p) => p.ID === ID);\n\n    if (project) {\n      return of(project);\n    } else {\n      throw new Error('Task not found');\n    }\n  }\n\n  createProject(project: ProjectInterface): Observable<ProjectInterface> {\n    this.projects.push(project);\n    this.saveDataToLocalStorage();\n    return of(project);\n  }\n\n  updateProject(project: ProjectInterface): Observable<ProjectInterface> {\n    const projectToUpdate = this.projects.find((p) => p.ID === project.name);\n\n    if (projectToUpdate) {\n      projectToUpdate.name = project.name;\n      projectToUpdate.description = project.description;\n      this.saveDataToLocalStorage();\n      return of(projectToUpdate);\n    } else {\n      return of();\n    }\n  }\n\n  deleteProject(ID: string): Observable<boolean> {\n    const newProjectsList = this.projects.filter((p) => p.ID !== ID);\n\n    if (newProjectsList) {\n      this.projects = newProjectsList;\n      this.saveDataToLocalStorage();\n      return of(true);\n    } else {\n      return of(false);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}