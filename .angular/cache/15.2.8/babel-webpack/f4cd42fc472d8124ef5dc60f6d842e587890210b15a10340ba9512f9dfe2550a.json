{"ast":null,"code":"import { Priority } from \"src/app/enums/priority.enum\";\nimport { WorkStatus } from \"src/app/enums/workStatus.enum\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/task.service\";\nimport * as i3 from \"src/app/services/functionality.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction TaskFormComponent_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const priority_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", priority_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(priority_r3);\n  }\n}\nfunction TaskFormComponent_option_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(status_r4);\n  }\n}\nfunction TaskFormComponent_option_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const functionality_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", functionality_r5.ID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(functionality_r5.name);\n  }\n}\nexport class TaskFormComponent {\n  constructor(formBuilder, taskService, functionalityService, router) {\n    this.formBuilder = formBuilder;\n    this.taskService = taskService;\n    this.functionalityService = functionalityService;\n    this.router = router;\n    this.tasks = [];\n    this.workStatusValues = Object.values(WorkStatus);\n    this.priorityValues = Object.values(Priority);\n    this.functionalityList = [];\n  }\n  ngOnInit() {\n    const currentDate = new Date().toISOString().split(\"T\")[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true\n    });\n    this.taskForm = this.formBuilder.group({\n      name: [\"\", Validators.required],\n      description: [\"\", Validators.required],\n      priority: [Priority.Low, Validators.required],\n      projectName: [\"\", Validators.required],\n      owner: [\"\", Validators.required],\n      status: [WorkStatus.Todo, Validators.required],\n      addedDate: addedDateControl,\n      startDate: [\"\"],\n      endDate: [\"\"],\n      timeSpent: [\"\"],\n      functionality: [\"\", Validators.required]\n    });\n    this.taskService.getTasks().subscribe(tasks => {\n      this.tasks = tasks;\n    }, error => console.log(error));\n    this.functionalityService.getFunctionalities().subscribe(functionalities => {\n      this.functionalityList = functionalities;\n    }, error => console.log(error));\n  }\n  addTask() {\n    const currentDate = new Date().toISOString().split(\"T\")[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true\n    });\n    const addedDateValue = addedDateControl.value !== null ? addedDateControl.value : currentDate;\n    const selectedFunctionalityId = this.taskForm.value.functionality;\n    const selectedFunctionality = this.functionalityList.find(f => f.ID === selectedFunctionalityId);\n    if (!selectedFunctionality) {\n      return; // Dodaj odpowiednie obsłużenie błędu, jeśli funkcjonalność nie zostanie znaleziona\n    }\n\n    const newTask = {\n      ID: Date.now().toString(),\n      name: this.taskForm.value.name,\n      description: this.taskForm.value.description,\n      priority: this.taskForm.value.priority,\n      functionalityID: selectedFunctionality.ID,\n      functionality: selectedFunctionality,\n      state: this.taskForm.value.status,\n      addedDate: new Date(addedDateValue),\n      startDate: this.taskForm.value.startDate,\n      endDate: this.taskForm.value.endDate,\n      assignedUser: this.taskForm.value.owner\n    };\n    this.taskService.createTask(newTask).subscribe(task => {\n      console.log(task);\n      if (!selectedFunctionality.tasks) {\n        selectedFunctionality.tasks = []; // Inicjalizuj tablicę zadaniami, jeśli nie istnieje\n      }\n\n      selectedFunctionality.tasks.push(task); // Dodaj zadanie do listy zadań funkcjonalności\n      this.router.navigateByUrl(\"/functionalities\");\n    }, error => console.log(error));\n  }\n}\nTaskFormComponent.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || TaskFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TaskService), i0.ɵɵdirectiveInject(i3.FunctionalityService), i0.ɵɵdirectiveInject(i4.Router));\n};\nTaskFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskFormComponent,\n  selectors: [[\"app-task-form\"]],\n  decls: 54,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"required\", \"\"], [\"for\", \"description\"], [\"id\", \"description\", \"formControlName\", \"description\", \"required\", \"\"], [\"for\", \"priority\"], [\"id\", \"priority\", \"formControlName\", \"priority\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"projectName\"], [\"type\", \"text\", \"id\", \"projectName\", \"formControlName\", \"projectName\", \"required\", \"\"], [\"for\", \"owner\"], [\"type\", \"text\", \"id\", \"owner\", \"formControlName\", \"owner\", \"required\", \"\"], [\"for\", \"status\"], [\"id\", \"status\", \"formControlName\", \"status\", \"required\", \"\"], [\"for\", \"addedDate\"], [\"type\", \"text\", \"id\", \"addedDate\", \"formControlName\", \"addedDate\", 3, \"disabled\"], [\"for\", \"startDate\"], [\"type\", \"text\", \"id\", \"startDate\", \"formControlName\", \"startDate\"], [\"for\", \"endDate\"], [\"type\", \"text\", \"id\", \"endDate\", \"formControlName\", \"endDate\"], [\"for\", \"timeSpent\"], [\"type\", \"text\", \"id\", \"timeSpent\", \"formControlName\", \"timeSpent\"], [\"for\", \"functionality\"], [\"id\", \"functionality\", \"formControlName\", \"functionality\", \"required\", \"\"], [\"type\", \"submit\"], [3, \"value\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n      i0.ɵɵtext(2, \"Add Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function TaskFormComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵelementStart(4, \"div\")(5, \"label\", 1);\n      i0.ɵɵtext(6, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\")(9, \"label\", 3);\n      i0.ɵɵtext(10, \"Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"textarea\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\")(13, \"label\", 5);\n      i0.ɵɵtext(14, \"Priority:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"select\", 6);\n      i0.ɵɵtemplate(16, TaskFormComponent_option_16_Template, 2, 2, \"option\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\")(18, \"label\", 8);\n      i0.ɵɵtext(19, \"Project Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\", 10);\n      i0.ɵɵtext(23, \"Owner:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\")(26, \"label\", 12);\n      i0.ɵɵtext(27, \"Status:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"select\", 13);\n      i0.ɵɵtemplate(29, TaskFormComponent_option_29_Template, 2, 2, \"option\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"div\")(31, \"label\", 14);\n      i0.ɵɵtext(32, \"Added Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(33, \"input\", 15);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"div\")(35, \"label\", 16);\n      i0.ɵɵtext(36, \"Start Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(37, \"input\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"div\")(39, \"label\", 18);\n      i0.ɵɵtext(40, \"End Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(41, \"input\", 19);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(42, \"div\")(43, \"label\", 20);\n      i0.ɵɵtext(44, \"Time Spent:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(45, \"input\", 21);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"div\")(47, \"label\", 22);\n      i0.ɵɵtext(48, \"Functionality:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(49, \"select\", 23);\n      i0.ɵɵtemplate(50, TaskFormComponent_option_50_Template, 2, 2, \"option\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(51, \"div\")(52, \"button\", 24);\n      i0.ɵɵtext(53, \"Add Task\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.priorityValues);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.workStatusValues);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", true);\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"ngForOf\", ctx.functionalityList);\n    }\n  },\n  dependencies: [i5.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".task-form[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n  margin: 0 auto;\\n  padding: 20px;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n}\\n\\n.input-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.input-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .input-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 5px;\\n  font-size: 16px;\\n  border-radius: 4px;\\n  border: 1px solid #ccc;\\n}\\n\\n.btn-create-task[_ngcontent-%COMP%] {\\n  display: block;\\n  width: 100%;\\n  padding: 10px;\\n  font-size: 16px;\\n  border-radius: 4px;\\n  background-color: #4caf50;\\n  color: white;\\n  border: none;\\n  cursor: pointer;\\n}\\n\\n.btn-create-task[_ngcontent-%COMP%]:hover {\\n  background-color: #45a049;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxrQkFBa0I7QUFDcEI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsYUFBYTtFQUNiLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixZQUFZO0VBQ1osZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQiIsImZpbGUiOiJ0YXNrLWZvcm0uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50YXNrLWZvcm0ge1xuICBtYXgtd2lkdGg6IDQwMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogMjBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuXG4uZm9ybS1ncm91cCB7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG59XG5cbi5pbnB1dC1ncm91cCBsYWJlbCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tYm90dG9tOiA1cHg7XG59XG5cbi5pbnB1dC1ncm91cCBpbnB1dCxcbi5pbnB1dC1ncm91cCBzZWxlY3Qge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogNXB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbn1cblxuLmJ0bi1jcmVhdGUtdGFzayB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTBweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0Y2FmNTA7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5idG4tY3JlYXRlLXRhc2s6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDVhMDQ5O1xufVxuIl19 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWZvcm0vdGFzay1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGtCQUFrQjtBQUNwQjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsY0FBYztFQUNkLFdBQVc7RUFDWCxhQUFhO0VBQ2IsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQix5QkFBeUI7RUFDekIsWUFBWTtFQUNaLFlBQVk7RUFDWixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBLGdnREFBZ2dEIiwic291cmNlc0NvbnRlbnQiOlsiLnRhc2stZm9ybSB7XG4gIG1heC13aWR0aDogNDAwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5mb3JtLWdyb3VwIHtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cblxuLmlucHV0LWdyb3VwIGxhYmVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1ib3R0b206IDVweDtcbn1cblxuLmlucHV0LWdyb3VwIGlucHV0LFxuLmlucHV0LWdyb3VwIHNlbGVjdCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA1cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xufVxuXG4uYnRuLWNyZWF0ZS10YXNrIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRjYWY1MDtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmJ0bi1jcmVhdGUtdGFzazpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM0NWEwNDk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Priority","WorkStatus","FormControl","Validators","i0","TaskFormComponent","constructor","formBuilder","taskService","functionalityService","router","Object","values","ngOnInit","currentDate","Date","toISOString","split","addedDateControl","value","disabled","taskForm","group","name","required","description","priority","Low","projectName","owner","status","Todo","addedDate","startDate","endDate","timeSpent","functionality","getTasks","subscribe","tasks","error","console","log","getFunctionalities","functionalities","functionalityList","addTask","addedDateValue","selectedFunctionalityId","selectedFunctionality","find","f","ID","newTask","now","toString","functionalityID","state","assignedUser","createTask","task","push","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-form/task-form.component.ts","/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-form/task-form.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { TaskInterface } from \"src/app/interfaces/task.interface\";\nimport { TaskService } from \"src/app/services/task.service\";\nimport { Priority } from \"src/app/enums/priority.enum\";\nimport { WorkStatus } from \"src/app/enums/workStatus.enum\";\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { FunctionalityService } from \"src/app/services/functionality.service\";\nimport { FunctionalityInterface } from \"src/app/interfaces/functionality.interface\";\n\n@Component({\n  selector: \"app-task-form\",\n  templateUrl: \"./task-form.component.html\",\n  styleUrls: [\"./task-form.component.css\"],\n})\nexport class TaskFormComponent implements OnInit {\n  tasks: TaskInterface[] = [];\n  taskForm!: FormGroup;\n  workStatusValues = Object.values(WorkStatus);\n  priorityValues = Object.values(Priority);\n  functionalityList: FunctionalityInterface[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private taskService: TaskService,\n    private functionalityService: FunctionalityService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    const currentDate = new Date().toISOString().split(\"T\")[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true,\n    });\n\n    this.taskForm = this.formBuilder.group({\n      name: [\"\", Validators.required],\n      description: [\"\", Validators.required],\n      priority: [Priority.Low, Validators.required],\n      projectName: [\"\", Validators.required],\n      owner: [\"\", Validators.required],\n      status: [WorkStatus.Todo, Validators.required],\n      addedDate: addedDateControl,\n      startDate: [\"\"],\n      endDate: [\"\"],\n      timeSpent: [\"\"],\n      functionality: [\"\", Validators.required],\n    });\n\n    this.taskService.getTasks().subscribe(\n      (tasks: TaskInterface[]) => {\n        this.tasks = tasks;\n      },\n      (error) => console.log(error)\n    );\n\n    this.functionalityService.getFunctionalities().subscribe(\n      (functionalities: FunctionalityInterface[]) => {\n        this.functionalityList = functionalities;\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  addTask() {\n    const currentDate = new Date().toISOString().split(\"T\")[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true,\n    });\n\n    const addedDateValue =\n      addedDateControl.value !== null ? addedDateControl.value : currentDate;\n\n    const selectedFunctionalityId = this.taskForm.value.functionality;\n\n    const selectedFunctionality = this.functionalityList.find(\n      (f) => f.ID === selectedFunctionalityId\n    );\n\n    if (!selectedFunctionality) {\n      return; // Dodaj odpowiednie obsłużenie błędu, jeśli funkcjonalność nie zostanie znaleziona\n    }\n\n    const newTask: TaskInterface = {\n      ID: Date.now().toString(),\n      name: this.taskForm.value.name,\n      description: this.taskForm.value.description,\n      priority: this.taskForm.value.priority,\n      functionalityID: selectedFunctionality.ID,\n      functionality: selectedFunctionality,\n      state: this.taskForm.value.status,\n      addedDate: new Date(addedDateValue),\n      startDate: this.taskForm.value.startDate,\n      endDate: this.taskForm.value.endDate,\n      assignedUser: this.taskForm.value.owner,\n    };\n\n    this.taskService.createTask(newTask).subscribe(\n      (task: TaskInterface) => {\n        console.log(task);\n        if (!selectedFunctionality.tasks) {\n          selectedFunctionality.tasks = []; // Inicjalizuj tablicę zadaniami, jeśli nie istnieje\n        }\n        selectedFunctionality.tasks.push(task); // Dodaj zadanie do listy zadań funkcjonalności\n        this.router.navigateByUrl(\"/functionalities\");\n      },\n      (error) => console.log(error)\n    );\n  }\n}\n","<div>\n  <h1>Add Task</h1>\n  <form [formGroup]=\"taskForm\" (ngSubmit)=\"addTask()\">\n    <div>\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" formControlName=\"name\" required>\n    </div>\n    <div>\n      <label for=\"description\">Description:</label>\n      <textarea id=\"description\" formControlName=\"description\" required></textarea>\n    </div>\n    <div>\n      <label for=\"priority\">Priority:</label>\n      <select id=\"priority\" formControlName=\"priority\" required>\n        <option *ngFor=\"let priority of priorityValues\" [value]=\"priority\">{{ priority }}</option>\n      </select>\n    </div>\n    <div>\n      <label for=\"projectName\">Project Name:</label>\n      <input type=\"text\" id=\"projectName\" formControlName=\"projectName\" required>\n    </div>\n    <div>\n      <label for=\"owner\">Owner:</label>\n      <input type=\"text\" id=\"owner\" formControlName=\"owner\" required>\n    </div>\n    <div>\n      <label for=\"status\">Status:</label>\n      <select id=\"status\" formControlName=\"status\" required>\n        <option *ngFor=\"let status of workStatusValues\" [value]=\"status\">{{ status }}</option>\n      </select>\n    </div>\n    <div>\n      <label for=\"addedDate\">Added Date:</label>\n      <input type=\"text\" id=\"addedDate\" formControlName=\"addedDate\" [disabled]=\"true\">\n    </div>\n    <div>\n      <label for=\"startDate\">Start Date:</label>\n      <input type=\"text\" id=\"startDate\" formControlName=\"startDate\">\n    </div>\n    <div>\n      <label for=\"endDate\">End Date:</label>\n      <input type=\"text\" id=\"endDate\" formControlName=\"endDate\">\n    </div>\n    <div>\n      <label for=\"timeSpent\">Time Spent:</label>\n      <input type=\"text\" id=\"timeSpent\" formControlName=\"timeSpent\">\n    </div>\n    <div>\n      <label for=\"functionality\">Functionality:</label>\n      <select id=\"functionality\" formControlName=\"functionality\" required>\n        <option *ngFor=\"let functionality of functionalityList\" [value]=\"functionality.ID\">{{ functionality.name }}</option>\n      </select>\n    </div>\n    <div>\n      <button type=\"submit\">Add Task</button>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}