{"ast":null,"code":"import { Priority } from 'src/app/enums/priority.enum';\nimport { WorkStatus } from 'src/app/enums/workStatus.enum';\nimport { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/task.service\";\nimport * as i3 from \"src/app/services/functionality.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction TaskFormComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const priority_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", priority_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", priority_r3, \" \");\n  }\n}\nfunction TaskFormComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", status_r4, \" \");\n  }\n}\nfunction TaskFormComponent_option_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const functionality_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", functionality_r5.ID);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", functionality_r5.name, \" \");\n  }\n}\nexport class TaskFormComponent {\n  constructor(formBuilder, taskService, functionalityService, router) {\n    this.formBuilder = formBuilder;\n    this.taskService = taskService;\n    this.functionalityService = functionalityService;\n    this.router = router;\n    this.tasks = [];\n    this.workStatusValues = Object.values(WorkStatus);\n    this.priorityValues = Object.values(Priority);\n    this.functionalityList = [];\n  }\n  ngOnInit() {\n    const currentDate = new Date().toISOString().split('T')[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true\n    });\n    this.taskForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      priority: [Priority.Low, Validators.required],\n      projectName: ['', Validators.required],\n      owner: ['', Validators.required],\n      status: [WorkStatus.Todo, Validators.required],\n      addedDate: addedDateControl,\n      startDate: [''],\n      endDate: [''],\n      timeSpent: [''],\n      functionality: ['', Validators.required]\n    });\n    this.taskService.getTasks().subscribe(tasks => {\n      this.tasks = tasks;\n    }, error => console.log(error));\n    this.functionalityService.getFunctionalities().subscribe(functionalities => {\n      this.functionalityList = functionalities;\n    }, error => console.log(error));\n  }\n  addTask() {\n    const currentDate = new Date().toISOString().split('T')[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true\n    });\n    const addedDateValue = addedDateControl.value !== null ? addedDateControl.value : currentDate;\n    const selectedFunctionalityId = this.taskForm.value.functionality;\n    const selectedFunctionality = this.functionalityList.find(f => f.ID === selectedFunctionalityId);\n    if (!selectedFunctionality) {\n      return; // Dodaj odpowiednie obsłużenie błędu, jeśli funkcjonalność nie zostanie znaleziona\n    }\n\n    const newTask = {\n      ID: Date.now().toString(),\n      name: this.taskForm.value.name,\n      description: this.taskForm.value.description,\n      priority: this.taskForm.value.priority,\n      functionalityID: selectedFunctionality.ID,\n      functionality: selectedFunctionality,\n      state: this.taskForm.value.status,\n      addedDate: new Date(addedDateValue),\n      startDate: this.taskForm.value.startDate,\n      endDate: this.taskForm.value.endDate,\n      assignedUser: this.taskForm.value.owner\n    };\n    this.taskService.createTask(newTask).subscribe(task => {\n      console.log(task);\n      if (!selectedFunctionality.tasks) {\n        selectedFunctionality.tasks = []; // Inicjalizuj tablicę zadaniami, jeśli nie istnieje\n      }\n\n      selectedFunctionality.tasks.push(task); // Dodaj zadanie do listy zadań funkcjonalności\n      this.router.navigateByUrl('/functionalities');\n    }, error => console.log(error));\n  }\n}\nTaskFormComponent.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || TaskFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TaskService), i0.ɵɵdirectiveInject(i3.FunctionalityService), i0.ɵɵdirectiveInject(i4.Router));\n};\nTaskFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskFormComponent,\n  selectors: [[\"app-task-form\"]],\n  decls: 38,\n  vars: 4,\n  consts: [[1, \"flex\", \"flex-col\", \"items-center\", \"my-6\", 3, \"formGroup\"], [1, \"max-w-[500px]\", \"w-full\"], [1, \"text-black-link\", \"text-2xl\", \"text-center\", \"font-bold\", \"mb-2\"], [1, \"w-full\", \"px-12\"], [1, \"flex\", \"flex-col\", \"mt-4\", \"gap-2\"], [\"htmlFor\", \"title\", 1, \"text-sm\"], [\"type\", \"text\", \"id\", \"title\", \"name\", \"title\", \"formControlName\", \"name\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [1, \"flex\", \"flex-col\", \"my-4\", \"gap-2\"], [\"htmlFor\", \"description\"], [\"type\", \"text\", \"id\", \"description\", \"name\", \"description\", \"formControlName\", \"description\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [\"htmlFor\", \"priority\"], [\"id\", \"priority\", \"name\", \"priority\", \"formControlName\", \"priority\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"htmlFor\", \"status\"], [\"id\", \"status\", \"name\", \"status\", \"formControlName\", \"status\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [\"htmlFor\", \"functionality\"], [\"id\", \"functionality\", \"name\", \"functionality\", \"formControlName\", \"functionality\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [\"htmlFor\", \"startDate\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", \"formControlName\", \"startDate\", \"min\", \"Date.now()\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [\"htmlFor\", \"endDate\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", \"formControlName\", \"endDate\", \"required\", \"\", 1, \"w-full\", \"border-gray-300\", \"px-3\", \"py-2\", \"rounded-sm\", \"shadow-sm\", \"focus:outline-none\", \"focus:border-indigo-500\"], [1, \"text-xl\", \"font-bold\", \"text-white\", \"rounded-lg\", \"bg-blue-500\", \"mt-6\", \"w-full\", \"py-3\", 3, \"click\"], [3, \"value\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n      i0.ɵɵtext(3, \" Create a new task for this functionality \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \" Title \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"label\", 8);\n      i0.ɵɵtext(11, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 7)(14, \"label\", 10);\n      i0.ɵɵtext(15, \"Priority\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"select\", 11);\n      i0.ɵɵtemplate(17, TaskFormComponent_option_17_Template, 2, 2, \"option\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\", 7)(19, \"label\", 13);\n      i0.ɵɵtext(20, \"Status\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"select\", 14);\n      i0.ɵɵtemplate(22, TaskFormComponent_option_22_Template, 2, 2, \"option\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\", 7)(24, \"label\", 15);\n      i0.ɵɵtext(25, \"Functionality\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"select\", 16);\n      i0.ɵɵtemplate(27, TaskFormComponent_option_27_Template, 2, 2, \"option\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\", 7)(29, \"label\", 17);\n      i0.ɵɵtext(30, \"Start date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\", 7)(33, \"label\", 19);\n      i0.ɵɵtext(34, \"End date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"button\", 21);\n      i0.ɵɵlistener(\"click\", function TaskFormComponent_Template_button_click_36_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵtext(37, \" Create task \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"ngForOf\", ctx.priorityValues);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.workStatusValues);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.functionalityList);\n    }\n  },\n  dependencies: [i5.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrLWZvcm0uY29tcG9uZW50LnNjc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWZvcm0vdGFzay1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx3S0FBd0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAGA,SAASA,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAEEC,WAAW,EAEXC,UAAU,QACL,gBAAgB;;;;;;;;;IC6BbC,kCAAmE;IACjEA,YACF;IAAAA,iBAAS;;;;IAFuCA,mCAAkB;IAChEA,eACF;IADEA,4CACF;;;;;IAaAA,kCAAiE;IAC/DA,YACF;IAAAA,iBAAS;;;;IAFuCA,iCAAgB;IAC9DA,eACF;IADEA,0CACF;;;;;IAaAA,kCAGC;IACCA,YACF;IAAAA,iBAAS;;;;IAHPA,2CAA0B;IAE1BA,eACF;IADEA,sDACF;;;ADtDV,OAAM,MAAOC,iBAAiB;EAO5BC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,oBAA0C,EAC1CC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,yBAAoB,GAApBC,oBAAoB;IACpB,WAAM,GAANC,MAAM;IAVhB,UAAK,GAAoB,EAAE;IAE3B,qBAAgB,GAAGC,MAAM,CAACC,MAAM,CAACX,UAAU,CAAC;IAC5C,mBAAc,GAAGU,MAAM,CAACC,MAAM,CAACZ,QAAQ,CAAC;IACxC,sBAAiB,GAA6B,EAAE;EAO7C;EAEHa,QAAQ;IACN,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAMC,gBAAgB,GAAG,IAAIhB,WAAW,CAAC;MACvCiB,KAAK,EAAEL,WAAW;MAClBM,QAAQ,EAAE;KACX,CAAC;IAEF,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACd,WAAW,CAACe,KAAK,CAAC;MACrCC,IAAI,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACqB,QAAQ,CAAC;MAC/BC,WAAW,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACqB,QAAQ,CAAC;MACtCE,QAAQ,EAAE,CAAC1B,QAAQ,CAAC2B,GAAG,EAAExB,UAAU,CAACqB,QAAQ,CAAC;MAC7CI,WAAW,EAAE,CAAC,EAAE,EAAEzB,UAAU,CAACqB,QAAQ,CAAC;MACtCK,KAAK,EAAE,CAAC,EAAE,EAAE1B,UAAU,CAACqB,QAAQ,CAAC;MAChCM,MAAM,EAAE,CAAC7B,UAAU,CAAC8B,IAAI,EAAE5B,UAAU,CAACqB,QAAQ,CAAC;MAC9CQ,SAAS,EAAEd,gBAAgB;MAC3Be,SAAS,EAAE,CAAC,EAAE,CAAC;MACfC,OAAO,EAAE,CAAC,EAAE,CAAC;MACbC,SAAS,EAAE,CAAC,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC,EAAE,EAAEjC,UAAU,CAACqB,QAAQ;KACxC,CAAC;IAEF,IAAI,CAAChB,WAAW,CAAC6B,QAAQ,EAAE,CAACC,SAAS,CAClCC,KAAsB,IAAI;MACzB,IAAI,CAACA,KAAK,GAAGA,KAAK;IACpB,CAAC,EACAC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAC9B;IAED,IAAI,CAAC/B,oBAAoB,CAACkC,kBAAkB,EAAE,CAACL,SAAS,CACrDM,eAAyC,IAAI;MAC5C,IAAI,CAACC,iBAAiB,GAAGD,eAAe;IAC1C,CAAC,EACAJ,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAC9B;EACH;EAEAM,OAAO;IACL,MAAMhC,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAMC,gBAAgB,GAAG,IAAIhB,WAAW,CAAC;MACvCiB,KAAK,EAAEL,WAAW;MAClBM,QAAQ,EAAE;KACX,CAAC;IAEF,MAAM2B,cAAc,GAClB7B,gBAAgB,CAACC,KAAK,KAAK,IAAI,GAAGD,gBAAgB,CAACC,KAAK,GAAGL,WAAW;IAExE,MAAMkC,uBAAuB,GAAG,IAAI,CAAC3B,QAAQ,CAACF,KAAK,CAACiB,aAAa;IAEjE,MAAMa,qBAAqB,GAAG,IAAI,CAACJ,iBAAiB,CAACK,IAAI,CACtDC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKJ,uBAAuB,CACxC;IAED,IAAI,CAACC,qBAAqB,EAAE;MAC1B,OAAO,CAAC;;;IAGV,MAAMI,OAAO,GAAkB;MAC7BD,EAAE,EAAErC,IAAI,CAACuC,GAAG,EAAE,CAACC,QAAQ,EAAE;MACzBhC,IAAI,EAAE,IAAI,CAACF,QAAQ,CAACF,KAAK,CAACI,IAAI;MAC9BE,WAAW,EAAE,IAAI,CAACJ,QAAQ,CAACF,KAAK,CAACM,WAAW;MAC5CC,QAAQ,EAAE,IAAI,CAACL,QAAQ,CAACF,KAAK,CAACO,QAAQ;MACtC8B,eAAe,EAAEP,qBAAqB,CAACG,EAAE;MACzChB,aAAa,EAAEa,qBAAqB;MACpCQ,KAAK,EAAE,IAAI,CAACpC,QAAQ,CAACF,KAAK,CAACW,MAAM;MACjCE,SAAS,EAAE,IAAIjB,IAAI,CAACgC,cAAc,CAAC;MACnCd,SAAS,EAAE,IAAI,CAACZ,QAAQ,CAACF,KAAK,CAACc,SAAS;MACxCC,OAAO,EAAE,IAAI,CAACb,QAAQ,CAACF,KAAK,CAACe,OAAO;MACpCwB,YAAY,EAAE,IAAI,CAACrC,QAAQ,CAACF,KAAK,CAACU;KACnC;IAED,IAAI,CAACrB,WAAW,CAACmD,UAAU,CAACN,OAAO,CAAC,CAACf,SAAS,CAC3CsB,IAAmB,IAAI;MACtBnB,OAAO,CAACC,GAAG,CAACkB,IAAI,CAAC;MACjB,IAAI,CAACX,qBAAqB,CAACV,KAAK,EAAE;QAChCU,qBAAqB,CAACV,KAAK,GAAG,EAAE,CAAC,CAAC;;;MAEpCU,qBAAqB,CAACV,KAAK,CAACsB,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC;MACxC,IAAI,CAAClD,MAAM,CAACoD,aAAa,CAAC,kBAAkB,CAAC;IAC/C,CAAC,EACAtB,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAC9B;EACH;;AA/FWnC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA0D;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCpB9B/D,+BAAqE;MAG/DA,0DACF;MAAAA,iBAAK;MACLA,8BAA0B;MAEkBA,uBAAM;MAAAA,iBAAQ;MAEtDA,2BAOE;MACJA,iBAAM;MACNA,8BAAsC;MACPA,4BAAW;MAAAA,iBAAQ;MAChDA,4BAOE;MACJA,iBAAM;MAENA,+BAAsC;MACVA,yBAAQ;MAAAA,iBAAQ;MAC1CA,mCAMC;MACCA,2EAES;MACXA,iBAAS;MAGXA,+BAAsC;MACZA,uBAAM;MAAAA,iBAAQ;MACtCA,mCAMC;MACCA,2EAES;MACXA,iBAAS;MAGXA,+BAAsC;MACLA,8BAAa;MAAAA,iBAAQ;MACpDA,mCAMC;MACCA,2EAKS;MACXA,iBAAS;MAGXA,+BAAsC;MACTA,2BAAU;MAAAA,iBAAQ;MAC7CA,6BAQE;MACJA,iBAAM;MAENA,+BAAsC;MACXA,yBAAQ;MAAAA,iBAAQ;MACzCA,6BAOE;MACJA,iBAAM;MAENA,mCAGC;MADCA;QAAA,OAASgE,aAAS;MAAA,EAAC;MAEnBhE,8BACF;MAAAA,iBAAS;;;MA5GTA,wCAAsB;MAuCWA,gBAAiB;MAAjBA,4CAAiB;MAenBA,eAAmB;MAAnBA,8CAAmB;MAgBlBA,eAAoB;MAApBA,+CAAoB","names":["Priority","WorkStatus","FormControl","Validators","i0","TaskFormComponent","constructor","formBuilder","taskService","functionalityService","router","Object","values","ngOnInit","currentDate","Date","toISOString","split","addedDateControl","value","disabled","taskForm","group","name","required","description","priority","Low","projectName","owner","status","Todo","addedDate","startDate","endDate","timeSpent","functionality","getTasks","subscribe","tasks","error","console","log","getFunctionalities","functionalities","functionalityList","addTask","addedDateValue","selectedFunctionalityId","selectedFunctionality","find","f","ID","newTask","now","toString","functionalityID","state","assignedUser","createTask","task","push","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-form/task-form.component.ts","/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/components/task-form/task-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TaskInterface } from 'src/app/interfaces/task.interface';\nimport { TaskService } from 'src/app/services/task.service';\nimport { Priority } from 'src/app/enums/priority.enum';\nimport { WorkStatus } from 'src/app/enums/workStatus.enum';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FunctionalityService } from 'src/app/services/functionality.service';\nimport { FunctionalityInterface } from 'src/app/interfaces/functionality.interface';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.scss'],\n})\nexport class TaskFormComponent implements OnInit {\n  tasks: TaskInterface[] = [];\n  taskForm!: FormGroup;\n  workStatusValues = Object.values(WorkStatus);\n  priorityValues = Object.values(Priority);\n  functionalityList: FunctionalityInterface[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private taskService: TaskService,\n    private functionalityService: FunctionalityService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    const currentDate = new Date().toISOString().split('T')[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true,\n    });\n\n    this.taskForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      priority: [Priority.Low, Validators.required],\n      projectName: ['', Validators.required],\n      owner: ['', Validators.required],\n      status: [WorkStatus.Todo, Validators.required],\n      addedDate: addedDateControl,\n      startDate: [''],\n      endDate: [''],\n      timeSpent: [''],\n      functionality: ['', Validators.required],\n    });\n\n    this.taskService.getTasks().subscribe(\n      (tasks: TaskInterface[]) => {\n        this.tasks = tasks;\n      },\n      (error) => console.log(error)\n    );\n\n    this.functionalityService.getFunctionalities().subscribe(\n      (functionalities: FunctionalityInterface[]) => {\n        this.functionalityList = functionalities;\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  addTask() {\n    const currentDate = new Date().toISOString().split('T')[0];\n    const addedDateControl = new FormControl({\n      value: currentDate,\n      disabled: true,\n    });\n\n    const addedDateValue =\n      addedDateControl.value !== null ? addedDateControl.value : currentDate;\n\n    const selectedFunctionalityId = this.taskForm.value.functionality;\n\n    const selectedFunctionality = this.functionalityList.find(\n      (f) => f.ID === selectedFunctionalityId\n    );\n\n    if (!selectedFunctionality) {\n      return; // Dodaj odpowiednie obsłużenie błędu, jeśli funkcjonalność nie zostanie znaleziona\n    }\n\n    const newTask: TaskInterface = {\n      ID: Date.now().toString(),\n      name: this.taskForm.value.name,\n      description: this.taskForm.value.description,\n      priority: this.taskForm.value.priority,\n      functionalityID: selectedFunctionality.ID,\n      functionality: selectedFunctionality,\n      state: this.taskForm.value.status,\n      addedDate: new Date(addedDateValue),\n      startDate: this.taskForm.value.startDate,\n      endDate: this.taskForm.value.endDate,\n      assignedUser: this.taskForm.value.owner,\n    };\n\n    this.taskService.createTask(newTask).subscribe(\n      (task: TaskInterface) => {\n        console.log(task);\n        if (!selectedFunctionality.tasks) {\n          selectedFunctionality.tasks = []; // Inicjalizuj tablicę zadaniami, jeśli nie istnieje\n        }\n        selectedFunctionality.tasks.push(task); // Dodaj zadanie do listy zadań funkcjonalności\n        this.router.navigateByUrl('/functionalities');\n      },\n      (error) => console.log(error)\n    );\n  }\n}\n","<form [formGroup]=\"taskForm\" class=\"flex flex-col items-center my-6\">\n  <div class=\"max-w-[500px] w-full\">\n    <h1 class=\"text-black-link text-2xl text-center font-bold mb-2\">\n      Create a new task for this functionality\n    </h1>\n    <div class=\"w-full px-12\">\n      <div class=\"flex flex-col mt-4 gap-2\">\n        <label htmlFor=\"title\" class=\"text-sm\"> Title </label>\n\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          formControlName=\"name\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        />\n      </div>\n      <div class=\"flex flex-col my-4 gap-2\">\n        <label htmlFor=\"description\">Description</label>\n        <input\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          formControlName=\"description\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        />\n      </div>\n\n      <div class=\"flex flex-col my-4 gap-2\">\n        <label htmlFor=\"priority\">Priority</label>\n        <select\n          id=\"priority\"\n          name=\"priority\"\n          formControlName=\"priority\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        >\n          <option *ngFor=\"let priority of priorityValues\" [value]=\"priority\">\n            {{ priority }}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"flex flex-col my-4 gap-2\">\n        <label htmlFor=\"status\">Status</label>\n        <select\n          id=\"status\"\n          name=\"status\"\n          formControlName=\"status\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        >\n          <option *ngFor=\"let status of workStatusValues\" [value]=\"status\">\n            {{ status }}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"flex flex-col my-4 gap-2\">\n        <label htmlFor=\"functionality\">Functionality</label>\n        <select\n          id=\"functionality\"\n          name=\"functionality\"\n          formControlName=\"functionality\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        >\n          <option\n            *ngFor=\"let functionality of functionalityList\"\n            [value]=\"functionality.ID\"\n          >\n            {{ functionality.name }}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"flex flex-col my-4 gap-2\">\n        <label htmlFor=\"startDate\">Start date</label>\n        <input\n          type=\"date\"\n          id=\"startDate\"\n          name=\"startDate\"\n          formControlName=\"startDate\"\n          min=\"Date.now()\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        />\n      </div>\n\n      <div class=\"flex flex-col my-4 gap-2\">\n        <label htmlFor=\"endDate\">End date</label>\n        <input\n          type=\"date\"\n          id=\"endDate\"\n          name=\"endDate\"\n          formControlName=\"endDate\"\n          required\n          class=\"w-full border-gray-300 px-3 py-2 rounded-sm shadow-sm focus:outline-none focus:border-indigo-500\"\n        />\n      </div>\n\n      <button\n        class=\"text-xl font-bold text-white rounded-lg bg-blue-500 mt-6 w-full py-3\"\n        (click)=\"addTask()\"\n      >\n        Create task\n      </button>\n    </div>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}