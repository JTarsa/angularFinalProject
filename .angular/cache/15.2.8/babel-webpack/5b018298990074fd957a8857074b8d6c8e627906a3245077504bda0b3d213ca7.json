{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class FunctionalityService {\n  getDataFromLocalStorage() {\n    const data = localStorage.getItem(this.localStorageKey);\n    if (data) this.functionalities = JSON.parse(data);\n  }\n  saveDataToLocalStorage() {\n    localStorage.setItem(this.localStorageKey, JSON.stringify(this.functionalities));\n  }\n  constructor() {\n    this.localStorageKey = 'functionalities';\n    this.functionalities = [];\n    this.getDataFromLocalStorage();\n  }\n  getFunctionalities() {\n    return of(this.functionalities);\n  }\n  getSingleFunctionality(ID) {\n    const functionality = this.functionalities.find(f => f.ID === ID);\n    if (functionality) {\n      return of(functionality);\n    } else {\n      throw new Error('Project not found');\n    }\n  }\n  createFunctionality(functionality) {\n    this.functionalities.push(functionality);\n    this.saveDataToLocalStorage();\n    return of(functionality);\n  }\n  updateFunctionality(functionality) {\n    const functionalityToUpdate = this.functionalities.find(f => f.ID = functionality.ID);\n    if (functionalityToUpdate) {\n      functionalityToUpdate.name = functionality.name;\n      functionalityToUpdate.description = functionality.description;\n      functionalityToUpdate.priority = functionality.priority;\n      functionalityToUpdate.status = functionality.status;\n      this.saveDataToLocalStorage();\n      return of(functionalityToUpdate);\n    } else {\n      return of();\n    }\n  }\n  deleteFunctionality(ID) {\n    const newFunctionalities = this.functionalities.filter(f => f.ID !== ID);\n    if (newFunctionalities) {\n      this.functionalities = newFunctionalities;\n      this.saveDataToLocalStorage();\n      return of(true);\n    } else {\n      return of(false);\n    }\n  }\n}\nFunctionalityService.ɵfac = function FunctionalityService_Factory(t) {\n  return new (t || FunctionalityService)();\n};\nFunctionalityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FunctionalityService,\n  factory: FunctionalityService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAoB,MAAM;;AAMjD,OAAM,MAAOC,oBAAoB;EAIvBC,uBAAuB;IAC7B,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,eAAe,CAAC;IACvD,IAAIH,IAAI,EAAE,IAAI,CAACI,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC;EACnD;EAEQO,sBAAsB;IAC5BN,YAAY,CAACO,OAAO,CAClB,IAAI,CAACL,eAAe,EACpBE,IAAI,CAACI,SAAS,CAAC,IAAI,CAACL,eAAe,CAAC,CACrC;EACH;EAEAM;IAfQ,oBAAe,GAAG,iBAAiB;IACnC,oBAAe,GAA6B,EAAE;IAepD,IAAI,CAACX,uBAAuB,EAAE;EAChC;EAEAY,kBAAkB;IAChB,OAAOd,EAAE,CAAC,IAAI,CAACO,eAAe,CAAC;EACjC;EAEAQ,sBAAsB,CAACC,EAAU;IAC/B,MAAMC,aAAa,GAAG,IAAI,CAACV,eAAe,CAACW,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAEnE,IAAIC,aAAa,EAAE;MACjB,OAAOjB,EAAE,CAACiB,aAAa,CAAC;KACzB,MAAM;MACL,MAAM,IAAIG,KAAK,CAAC,mBAAmB,CAAC;;EAExC;EAEAC,mBAAmB,CACjBJ,aAAqC;IAErC,IAAI,CAACV,eAAe,CAACe,IAAI,CAACL,aAAa,CAAC;IACxC,IAAI,CAACP,sBAAsB,EAAE;IAC7B,OAAOV,EAAE,CAACiB,aAAa,CAAC;EAC1B;EAEAM,mBAAmB,CACjBN,aAAqC;IAErC,MAAMO,qBAAqB,GAAG,IAAI,CAACjB,eAAe,CAACW,IAAI,CACpDC,CAAC,IAAMA,CAAC,CAACH,EAAE,GAAGC,aAAa,CAACD,EAAG,CACjC;IAED,IAAIQ,qBAAqB,EAAE;MACzBA,qBAAqB,CAACC,IAAI,GAAGR,aAAa,CAACQ,IAAI;MAC/CD,qBAAqB,CAACE,WAAW,GAAGT,aAAa,CAACS,WAAW;MAC7DF,qBAAqB,CAACG,QAAQ,GAAGV,aAAa,CAACU,QAAQ;MACvDH,qBAAqB,CAACI,MAAM,GAAGX,aAAa,CAACW,MAAM;MACnD,IAAI,CAAClB,sBAAsB,EAAE;MAC7B,OAAOV,EAAE,CAACwB,qBAAqB,CAAC;KACjC,MAAM;MACL,OAAOxB,EAAE,EAAE;;EAEf;EAEA6B,mBAAmB,CAACb,EAAU;IAC5B,MAAMc,kBAAkB,GAAG,IAAI,CAACvB,eAAe,CAACwB,MAAM,CAAEZ,CAAC,IAAKA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAE1E,IAAIc,kBAAkB,EAAE;MACtB,IAAI,CAACvB,eAAe,GAAGuB,kBAAkB;MACzC,IAAI,CAACpB,sBAAsB,EAAE;MAC7B,OAAOV,EAAE,CAAC,IAAI,CAAC;KAChB,MAAM;MACL,OAAOA,EAAE,CAAC,KAAK,CAAC;;EAEpB;;AAvEWC,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAA+B,SAApB/B,oBAAoB;EAAAgC,YAFnB;AAAM","names":["of","FunctionalityService","getDataFromLocalStorage","data","localStorage","getItem","localStorageKey","functionalities","JSON","parse","saveDataToLocalStorage","setItem","stringify","constructor","getFunctionalities","getSingleFunctionality","ID","functionality","find","f","Error","createFunctionality","push","updateFunctionality","functionalityToUpdate","name","description","priority","status","deleteFunctionality","newFunctionalities","filter","factory","providedIn"],"sourceRoot":"","sources":["/Users/haze/Desktop/Angular Final Project/angularFinalProject/src/app/services/functionality.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { FunctionalityInterface } from '../interfaces/functionality.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FunctionalityService {\n  private localStorageKey = 'functionalities';\n  private functionalities: FunctionalityInterface[] = [];\n\n  private getDataFromLocalStorage(): void {\n    const data = localStorage.getItem(this.localStorageKey);\n    if (data) this.functionalities = JSON.parse(data);\n  }\n\n  private saveDataToLocalStorage(): void {\n    localStorage.setItem(\n      this.localStorageKey,\n      JSON.stringify(this.functionalities)\n    );\n  }\n\n  constructor() {\n    this.getDataFromLocalStorage();\n  }\n\n  getFunctionalities(): Observable<FunctionalityInterface[]> {\n    return of(this.functionalities);\n  }\n\n  getSingleFunctionality(ID: string): Observable<FunctionalityInterface> {\n    const functionality = this.functionalities.find((f) => f.ID === ID);\n\n    if (functionality) {\n      return of(functionality);\n    } else {\n      throw new Error('Project not found');\n    }\n  }\n\n  createFunctionality(\n    functionality: FunctionalityInterface\n  ): Observable<FunctionalityInterface> {\n    this.functionalities.push(functionality);\n    this.saveDataToLocalStorage();\n    return of(functionality);\n  }\n\n  updateFunctionality(\n    functionality: FunctionalityInterface\n  ): Observable<FunctionalityInterface> {\n    const functionalityToUpdate = this.functionalities.find(\n      (f) => (f.ID = functionality.ID)\n    );\n\n    if (functionalityToUpdate) {\n      functionalityToUpdate.name = functionality.name;\n      functionalityToUpdate.description = functionality.description;\n      functionalityToUpdate.priority = functionality.priority;\n      functionalityToUpdate.status = functionality.status;\n      this.saveDataToLocalStorage();\n      return of(functionalityToUpdate);\n    } else {\n      return of();\n    }\n  }\n\n  deleteFunctionality(ID: string): Observable<boolean> {\n    const newFunctionalities = this.functionalities.filter((f) => f.ID !== ID);\n\n    if (newFunctionalities) {\n      this.functionalities = newFunctionalities;\n      this.saveDataToLocalStorage();\n      return of(true);\n    } else {\n      return of(false);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}